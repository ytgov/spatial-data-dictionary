import express, { Request, Response, } from "express";
import cors from "cors";
import path from "path";
import helmet from "helmet";
import * as config from './config';
import { doHealthCheck } from "./utils/healthCheck";
import { categoryRouter, userRouter, sessionRouter, entityRouter, locationRouter, programRouter, domainRouter } from "./routes";
import { RequiresData } from "./middleware";
import { personRouter } from "./routes/person-router";

import { configureAuthentication, configureLocalAuthentication } from "./routes";

const app = express();
app.use(express.json()); // for parsing application/json
app.use(express.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded
app.use(
  helmet.contentSecurityPolicy({
    directives: {
      'default-src': ["'self'"],
      'base-uri': ["'self'"],
      'block-all-mixed-content': [],
      'font-src': ["'self'", 'https:', 'data:'],
      'frame-ancestors': ["'self'"],
      'img-src': ["'self'", 'data:'],
      'object-src': ["'none'"],
      'script-src': ["'self'", "'unsafe-eval'"],
      'script-src-attr': ["'none'"],
      'style-src': ["'self'", 'https:', "'unsafe-inline'"]
    },
  })
);

// very basic CORS setup
app.use(cors({
  origin: config.FRONTEND_URL,
  optionsSuccessStatus: 200,
  credentials: true
}));

if (config.USE_LOCAL_AUTH)
  configureLocalAuthentication(app);
else
  configureAuthentication(app);

app.get("/api/healthCheck", RequiresData, (req: Request, res: Response) => {
  doHealthCheck(req, res);
});

app.use("/api/user", userRouter);
app.use("/api/session", sessionRouter);
app.use("/api/entity", entityRouter);
app.use("/api/category", categoryRouter);
app.use("/api/location", locationRouter);
app.use("/api/program", programRouter);
app.use("/api/domain", domainRouter);
app.use("/api/person", personRouter);

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, 'web')));

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, 'web') + "/index.html")
})

const PORT: number = parseInt(config.API_PORT as string);

app.listen(PORT, async () => {
  console.log(`Data Dictionary API listenting on port ${PORT}`);
});
